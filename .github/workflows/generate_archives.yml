name: Generate archives

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  generate_archives:
    name: Generate cross-platform builds
    runs-on: ubuntu-latest
    steps:
      - name: Branch name
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Generate build files
        uses: thatisuday/go-cross-build@v1
        with:
          platforms: 'linux/amd64, darwin/amd64, windows/amd64'
          package: 'server'
          name: 'albaplayer'
          compress: 'false'
          dest: 'build/dist'
      - name: Generate version file
        env:
          SOURCE_TAG: ${{ steps.branch_name.outputs.SOURCE_TAG }}
        run: |
          DATE=`date '+%Y%m%d%H%M%S'`
          mkdir dist
          echo "version: ${{ env.SOURCE_TAG }}" >> dist/version.txt
          echo "build date: ${DATE}" >> dist/version.txt

      - name: Generate frontend
        run: |
          cd client
          yarn install
          yarn build

      - name: Build linux archive
        env:
          SOURCE_TAG: ${{ steps.branch_name.outputs.SOURCE_TAG }}
        run: |
          cd dist
          mkdir linux
          mv ../server/build/dist/albaplayer-linux-amd64 ./linux/alba
          cp version.txt ./linux
          cp ../server/build/albaplayer.service ./linux
          cp ../server/build/prod.alba.yml ./linux/alba.yml
          cp -R ../client/build ./linux/web
          tar czf albaplayer-linux-${{ env.SOURCE_TAG }}.tar.gz linux
          rm linux

      - name: Build macos archive
        env:
          SOURCE_TAG: ${{ steps.branch_name.outputs.SOURCE_TAG }}
        run: |
          cd dist
          mkdir macos
          mv ../server/build/dist/albaplayer-darwin-amd64 ./macos/alba
          cp version.txt ./macos
          cp ../server/build/prod.alba.yml ./macos/alba.yml
          cp -R ../client/build ./macos/web
          zip -rq albaplayer-macos-${{ env.SOURCE_TAG }}.zip macos
          rm macos

      - name: Build windows archive
        env:
          SOURCE_TAG: ${{ steps.branch_name.outputs.SOURCE_TAG }}
        run: |
          cd dist
          mkdir windows
          mv ../server/build/dist/albaplayer-windows-amd64.exe ./macos/alba.exe
          cp version.txt ./windows
          cp ../server/build/prod.alba.yml ./windows/alba.yml
          cp -R ../client/build ./windows/web
          zip -rq albaplayer-windows-${{ env.SOURCE_TAG }}.zip windows
          rm windows

      - name: Cleanup temporary build files
        run: |
          rm dist/version.txt

      - name: Upload archives to server
        env:
          SOURCE_TAG: ${{ steps.branch_name.outputs.SOURCE_TAG }}
        uses: mdallasanta/ssh-scp-deploy@v1.1.0
        with:
          local: './dist'
          remote: ${{ secrets.REMOTE_UPLOAD_PATH }}${{ env.SOURCE_TAG }}
          host: ${{ secrets.REMOTE_ADDRESS }}
          port: ${{ secrets.REMOTE_PORT }}
          user: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          pre_upload: mkdir ${{ env.SOURCE_TAG }}

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: generated-archives
          path: |
            dist

#  upload_archives:
